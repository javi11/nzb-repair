// Code generated by MockGen. DO NOT EDIT.
// Source: ../repairnzb/par2.go
//
// Generated by this command:
//
//	mockgen -source=../repairnzb/par2.go -destination=./par2_executor_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPar2Executor is a mock of Par2Executor interface.
type MockPar2Executor struct {
	ctrl     *gomock.Controller
	recorder *MockPar2ExecutorMockRecorder
	isgomock struct{}
}

// MockPar2ExecutorMockRecorder is the mock recorder for MockPar2Executor.
type MockPar2ExecutorMockRecorder struct {
	mock *MockPar2Executor
}

// NewMockPar2Executor creates a new mock instance.
func NewMockPar2Executor(ctrl *gomock.Controller) *MockPar2Executor {
	mock := &MockPar2Executor{ctrl: ctrl}
	mock.recorder = &MockPar2ExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPar2Executor) EXPECT() *MockPar2ExecutorMockRecorder {
	return m.recorder
}

// Repair mocks base method.
func (m *MockPar2Executor) Repair(ctx context.Context, tmpPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repair", ctx, tmpPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Repair indicates an expected call of Repair.
func (mr *MockPar2ExecutorMockRecorder) Repair(ctx, tmpPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repair", reflect.TypeOf((*MockPar2Executor)(nil).Repair), ctx, tmpPath)
}
